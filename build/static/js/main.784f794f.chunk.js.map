{"version":3,"sources":["utils/ColumnHeaderLabel.js","store/SummaryStore.js","utils/Comparators.js","store/TableStore.js","components/header/Header.js","components/summary/SummaryValues.js","components/summary/Summary.js","components/table/TableHeader.js","components/table/TableRow.js","components/table/Table.js","components/filters/Filters.js","components/wrapper/Wrapper.js","App.js","store/store.js","index.js"],"names":["labelMap","NewConfirmed","TotalConfirmed","NewDeaths","TotalDeaths","NewRecovered","TotalRecovered","Country","initialState","items","label","Labels","value","SummaryStore","createSlice","name","reducers","updateSummary","state","actions","globalValues","payload","key","undefined","push","console","log","SummaryActions","Comparators","compareCountryDescending","a","b","compareCountryAscending","compareNewConfirmedAscending","compareNewConfirmedDescending","compareTotalConfirmedAscending","compareTotalConfirmedDescending","compareNewDeathsAscending","compareNewDeathsDescending","compareTotalDeathsAscending","compareTotalDeathsDescending","compareNewRecoveredAscending","compareNewRecoveredDescending","compareTotalRecoveredAscending","compareTotalRecoveredDescending","TableStore","ID","CountryCode","Slug","Date","completeItems","minMaxValues","min","max","updateTableStore","minNewDeaths","maxNewDeaths","minNewConfirmed","maxNewConfirmed","minTotalConfirmed","maxTotalConfirmed","map","eachCountry","sortTableAscending","sort","sortTableDescending","applyFilter","filter","country","includes","TableActions","Header","useState","toTimeString","lastRefreshedDate","setDate","dispatch","useDispatch","className","onClick","fetch","method","then","data","json","Global","Countries","catch","err","SummaryValues","props","Summary","summaryArray","useSelector","summary","item","TableHeader","sortAscending","evt","field","currentTarget","getAttribute","sortDescending","TableRow","commonProps","Table","TableArray","table","Filters","useEffect","setSelectedRangeValue","document","getElementById","selectedRangeValue","filterChanged","filterValues","getFilterValues","id","placeholder","type","onKeyUp","onInput","func","delay","debounceTimerForNewConfirmed","context","this","args","arguments","clearTimeout","setTimeout","apply","debounceForNewConfirmed","defaultValue","step","Wrapper","App","store","configureStore","reducer","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.784f794f.chunk.js","sourcesContent":["const labelMap = {\n    NewConfirmed : \"New Confirmed\",\n    TotalConfirmed : \"Total Confirmed\",\n    NewDeaths : \"New Deaths\",\n    TotalDeaths : \"Total Deaths\",\n    NewRecovered : \"New Recovered\",\n    TotalRecovered : \"Total Recovered\",\n    Country : \"Country Name\"\n}\n\nexport default labelMap;","import { createSlice } from '@reduxjs/toolkit';\nimport Labels from '../utils/ColumnHeaderLabel';\n\nconst initialState = {\n    items : [\n        {\n            label : Labels.NewConfirmed,\n            value : 0\n        },\n        {\n            label : Labels.NewDeaths,\n            value : 0\n        },\n        {\n            label : Labels.NewRecovered,\n            value : 0\n        },\n        {\n            label : Labels.TotalConfirmed,\n            value : 0\n        },\n        {\n            label : Labels.TotalDeaths,\n            value : 0\n        },\n        {\n            label : Labels.TotalRecovered,\n            value : 0\n        }\n    ]\n}\n\n\nconst SummaryStore = createSlice({\n    name : 'summarySlice',\n    initialState,\n    reducers : {\n        updateSummary(state,actions){\n            let globalValues = actions.payload;\n            let items = []\n            for(let key in Labels){\n                if(globalValues[key] === undefined){\n                    continue;\n                }\n                items.push({\n                    label : Labels[key],\n                    value : globalValues[key]\n                })\n            }\n            state.items = items;\n\n            console.log(\"Summary updates should be done here\");\n        }\n    }\n})\n\nexport const SummaryActions = SummaryStore.actions;\nexport default SummaryStore;\n\n","function Comparators () {\n    function compareCountryDescending( a, b) {\n\n        if ( a.Country > b.Country ){\n            return -1;\n        }\n        if ( a.Country < b.Country ){\n            return 1;\n        }\n        return 0;\n    }\n    function compareCountryAscending( a, b ) {\n        if ( a.Country < b.Country ){\n            return -1;\n        }\n        if ( a.Country > b.Country ){\n            return 1;\n        }\n        return 0;\n    }\n\n    function compareNewConfirmedAscending( a, b ) {\n        if ( a.NewConfirmed < b.NewConfirmed ){\n            return -1;\n        }\n        if ( a.NewConfirmed > b.NewConfirmed ){\n            return 1;\n        }\n        return 0;\n    }\n    function compareNewConfirmedDescending( a, b ) {\n        if ( a.NewConfirmed > b.NewConfirmed ){\n            return -1;\n        }\n        if ( a.NewConfirmed < b.NewConfirmed ){\n            return 1;\n        }\n        return 0;\n    }\n\n    function compareTotalConfirmedAscending( a, b ) {\n        if ( a.TotalConfirmed < b.TotalConfirmed ){\n            return -1;\n        }\n        if ( a.NewConfirmed > b.NewConfirmed ){\n            return 1;\n        }\n        return 0;\n    }\n    function compareTotalConfirmedDescending( a, b ) {\n        if ( a.TotalConfirmed > b.TotalConfirmed ){\n            return -1;\n        }\n        if ( a.TotalConfirmed < b.TotalConfirmed ){\n            return 1;\n        }\n        return 0;\n    }\n    function compareNewDeathsAscending( a, b ) {\n        if ( a.NewDeaths < b.NewDeaths ){\n            return -1;\n        }\n        if ( a.NewDeaths > b.NewDeaths ){\n            return 1;\n        }\n        return 0;\n    }\n    function compareNewDeathsDescending( a, b ) {\n        if ( a.NewDeaths > b.NewDeaths ){\n            return -1;\n        }\n        if ( a.NewDeaths < b.NewDeaths ){\n            return 1;\n        }\n        return 0;\n    }\n    function compareTotalDeathsAscending( a, b ) {\n        if ( a.TotalDeaths < b.TotalDeaths ){\n            return -1;\n        }\n        if ( a.TotalDeaths > b.TotalDeaths ){\n            return 1;\n        }\n        return 0;\n    }\n    function compareTotalDeathsDescending( a, b ) {\n        if ( a.TotalDeaths > b.TotalDeaths ){\n            return -1;\n        }\n        if ( a.TotalDeaths < b.TotalDeaths ){\n            return 1;\n        }\n        return 0;\n    }\n    function compareNewRecoveredAscending( a, b ) {\n        if ( a.NewRecovered < b.NewRecovered ){\n            return -1;\n        }\n        if ( a.NewRecovered > b.NewRecovered ){\n            return 1;\n        }\n        return 0;\n    }\n    function compareNewRecoveredDescending( a, b ) {\n        if ( a.NewRecovered > b.NewRecovered ){\n            return -1;\n        }\n        if ( a.NewRecovered < b.NewRecovered ){\n            return 1;\n        }\n        return 0;\n    }\n    function compareTotalRecoveredAscending( a, b ) {\n        if ( a.TotalRecovered < b.TotalRecovered ){\n            return -1;\n        }\n        if ( a.TotalRecovered > b.TotalRecovered ){\n            return 1;\n        }\n        return 0;\n    }\n    function compareTotalRecoveredDescending( a, b ) {\n        if ( a.TotalRecovered > b.TotalRecovered ){\n            return -1;\n        }\n        if ( a.TotalRecovered < b.TotalRecovered ){\n            return 1;\n        }\n        return 0;\n    }\n\n    return {\n        compareCountryDescending :compareCountryDescending,\n        compareCountryAscending : compareCountryAscending,\n        compareNewConfirmedAscending : compareNewConfirmedAscending,\n        compareNewConfirmedDescending : compareNewConfirmedDescending,\n        compareTotalConfirmedAscending : compareTotalConfirmedAscending,\n        compareTotalConfirmedDescending : compareTotalConfirmedDescending,\n        compareNewDeathsAscending : compareNewDeathsAscending,\n        compareNewDeathsDescending : compareNewDeathsDescending,\n        compareTotalDeathsAscending : compareTotalDeathsAscending,\n        compareTotalDeathsDescending : compareTotalDeathsDescending,\n        compareNewRecoveredAscending : compareNewRecoveredAscending,\n        compareNewRecoveredDescending : compareNewRecoveredDescending,\n        compareTotalRecoveredAscending : compareTotalRecoveredAscending,\n        compareTotalRecoveredDescending : compareTotalRecoveredDescending\n    }\n}\nexport default Comparators();","import { createSlice } from '@reduxjs/toolkit';\n\nimport Comparators from \"../utils/Comparators\";\n\nconst initialState = {\n    items : [\n        {\n            ID: \"0\",\n            Country: \"\",\n            CountryCode: \"\",\n            Slug: \"\",\n            NewConfirmed: 0,\n            TotalConfirmed: 0,\n            NewDeaths: 0,\n            TotalDeaths: 0,\n            NewRecovered: 0,\n            TotalRecovered: 0,\n            Date: \"\",\n        }\n    ],\n    completeItems : [],\n    minMaxValues :{\n        NewConfirmed : {\n            min : 0,\n            max : 0\n        },\n        TotalConfirmed : {\n            min : 0,\n            max : 0\n        },\n        NewDeaths : {\n            min : 0,\n            max : 0\n        },\n\n    }\n};\n\nconst TableStore = createSlice({\n    name: 'summarySlice',\n    initialState,\n    reducers: {\n        updateTableStore(state,actions){\n            state.items = actions.payload;\n            state.completeItems = actions.payload;\n            let minNewDeaths = actions.payload[0].NewDeaths;\n            let maxNewDeaths = actions.payload[0].NewDeaths;\n            let minNewConfirmed = actions.payload[0].NewConfirmed;\n            let maxNewConfirmed = actions.payload[0].NewConfirmed;\n            let minTotalConfirmed = actions.payload[0].TotalConfirmed;\n            let maxTotalConfirmed = actions.payload[0].TotalConfirmed;\n\n            actions.payload.map((eachCountry)=>{\n                if(eachCountry.NewConfirmed < minNewConfirmed){\n                    minNewConfirmed = eachCountry.NewConfirmed;\n                }\n                if(eachCountry.NewConfirmed > maxNewConfirmed){\n                    maxNewConfirmed = eachCountry.NewConfirmed;\n                }\n                if(eachCountry.TotalConfirmed > maxTotalConfirmed){\n                    maxTotalConfirmed = eachCountry.TotalConfirmed;\n                }\n                if(eachCountry.TotalConfirmed < minTotalConfirmed){\n                    minTotalConfirmed = eachCountry.TotalConfirmed;\n                }\n                if(eachCountry.NewDeaths > maxNewDeaths) {\n                    maxNewDeaths = eachCountry.NewDeaths;\n                }\n                if(eachCountry.NewDeaths < minNewDeaths) {\n                    minNewDeaths = eachCountry.NewDeaths;\n                }\n            })\n\n            state.minMaxValues['NewConfirmed'].min = minNewConfirmed;\n            state.minMaxValues['NewConfirmed'].max = maxNewConfirmed;\n\n            state.minMaxValues['TotalConfirmed'].min = minTotalConfirmed;\n            state.minMaxValues['TotalConfirmed'].max = maxTotalConfirmed;\n\n            state.minMaxValues['NewDeaths'].min = minNewDeaths;\n            state.minMaxValues['NewDeaths'].max = maxNewDeaths;\n\n            //console.log(\"Table array : \" + JSON.stringify(state.items));\n        },\n        sortTableAscending(state,actions){\n            console.log(\"sortTableAscending is called!!\" + actions.payload);\n            switch (actions.payload) {\n                case \"Country\":\n                    state.items.sort(Comparators.compareCountryAscending);\n                    break;\n                case \"NewConfirmed\":\n                    state.items.sort(Comparators.compareNewConfirmedAscending);\n                    break;\n                case \"TotalConfirmed\":\n                    state.items.sort(Comparators.compareTotalConfirmedAscending);\n                    break;\n                case \"NewDeaths\":\n                    state.items.sort(Comparators.compareNewDeathsAscending);\n                    break;\n                case \"TotalDeaths\":\n                    state.items.sort(Comparators.compareTotalDeathsAscending);\n                    break;\n                case \"NewRecovered\":\n                    state.items.sort(Comparators.compareNewRecoveredAscending);\n                    break;\n                case \"TotalRecovered\":\n                    state.items.sort(Comparators.compareTotalRecoveredAscending);\n                    break;\n                default :\n                    break;\n            }\n\n        },\n        sortTableDescending(state,actions){\n            console.log(\"sortTableDescending is called!!\"+ actions.payload);\n            switch (actions.payload) {\n                case \"Country\":\n                    state.items.sort(Comparators.compareCountryDescending);\n                    break;\n                case \"NewConfirmed\":\n                    state.items.sort(Comparators.compareNewConfirmedDescending);\n                    break;\n                case \"TotalConfirmed\":\n                    state.items.sort(Comparators.compareTotalConfirmedDescending);\n                    break;\n                case \"NewDeaths\":\n                    state.items.sort(Comparators.compareNewDeathsDescending);\n                    break;\n                case \"TotalDeaths\":\n                    state.items.sort(Comparators.compareTotalDeathsDescending);\n                    break;\n                case \"NewRecovered\":\n                    state.items.sort(Comparators.compareNewRecoveredDescending);\n                    break;\n                case \"TotalRecovered\":\n                    state.items.sort(Comparators.compareTotalRecoveredDescending);\n                    break;\n                default :\n                    break;\n            }\n        },\n\n        applyFilter(state,actions) {\n            console.log(\"Apply filters called\");\n            let items = state.completeItems.filter(country => {\n                if(country.Country.includes(actions.payload.country) && country.NewConfirmed <= actions.payload.NewConfirmed) {\n                    return true;\n                }\n            });\n            state.items = items;\n        }\n\n    }\n})\n\n\nexport const TableActions = TableStore.actions;\nexport default TableStore;\n\n\n","import './Header.css';\nimport React, { useState } from 'react';\nimport { SummaryActions } from '../../store/SummaryStore';\nimport { TableActions } from '../../store/TableStore';\nimport { useDispatch } from  'react-redux';\n\n\nfunction Header() {\n    const [lastRefreshedDate, setDate] = useState(new Date().toTimeString());\n    const dispatch = useDispatch();\n    const refreshButtonHandler = ()=>{\n        fetch(\"https://api.covid19api.com/summary\", {method : 'GET'}).then(data => data.json()).then((data)=>{\n            console.log(data);\n            dispatch(SummaryActions.updateSummary(data.Global));\n            dispatch(TableActions.updateTableStore(data.Countries));\n            setDate(new Date().toTimeString());\n        }).catch((err)=>{\n            console.log(\"Error while fetching data\");\n        })\n\n    }\n    return (\n        <header className=\"header\">\n            <div className=\"logoDiv\">\n                <p className=\"logoText\">Covid Tracker</p>\n            </div>\n            <div className=\"refreshedDiv\">\n                <button className=\"refreshButton\" onClick={refreshButtonHandler}>Refresh</button>\n                <p>Last Refreshed : {lastRefreshedDate}</p>\n            </div>\n        </header>\n    )\n}\n\nexport default Header;","function SummaryValues(props) {\n    return (\n        <div className=\"eachSummarySection\">\n            <p className=\"summarySectionLabel\">{props.label}</p>\n            <p className=\"summarySectionValue\">{props.value}</p>\n\n            <p className=\"summarySectionValueLoading\"></p>\n        </div>\n    )\n}\n\nexport default SummaryValues;","import  { useSelector } from \"react-redux\";\n\nimport SummaryValues from \"./SummaryValues\";\nimport './Summary.css';\nfunction Summary() {\n    const summaryArray = useSelector(state =>  {\n        //console.log(state.summary.items);\n        return state.summary.items\n    });\n\n    return (\n        <div className=\"summaryDiv\">\n            <div className=\"summaryHeaderDiv\"><p className=\"summaryHeaderText\">Global Summary</p> </div>\n                {summaryArray.map((item)=> (\n                    <SummaryValues key={item.label} label={item.label} value={item.value}/>\n                ))}\n        </div>\n    )\n}\n\nexport default Summary;","\nimport Labels from '../../utils/ColumnHeaderLabel'\nimport { useDispatch } from  'react-redux';\nimport {TableActions} from \"../../store/TableStore\";\n\nfunction TableHeader() {\n    const dispatch = useDispatch();\n\n    const sortAscending = (evt) => {\n        console.log(\"Ascending is called\");\n        let field = evt.currentTarget.getAttribute('data-field');\n        dispatch(TableActions.sortTableAscending(field));\n    }\n    const sortDescending = (evt) => {\n        console.log(\"sortDescending is called\");\n        let field = evt.currentTarget.getAttribute('data-field');\n        dispatch(TableActions.sortTableDescending(field));\n    }\n    return (\n        <thead className=\"tableHeaderDiv\">\n            <tr>\n              <th> {Labels[\"Country\"]} <div className=\"iconsWrapper\"> <span data-field=\"Country\" className=\"sortAscending\" onClick={sortAscending}>  </span> <span className=\"sortDescending\" data-field=\"Country\" onClick={sortDescending}>  </span> </div> </th>\n              <th> {Labels[\"NewConfirmed\"]} <div className=\"iconsWrapper\"> <span data-field=\"NewConfirmed\" className=\"sortAscending\" onClick={sortAscending}>  </span> <span data-field=\"NewConfirmed\" className=\"sortDescending\" onClick={sortDescending}>  </span> </div> </th>\n              <th> {Labels[\"TotalConfirmed\"]} <div className=\"iconsWrapper\"> <span data-field=\"TotalConfirmed\" className=\"sortAscending\" onClick={sortAscending}>  </span> <span data-field=\"TotalConfirmed\" className=\"sortDescending\" onClick={sortDescending}>  </span> </div> </th>\n              <th> {Labels[\"NewDeaths\"]} <div className=\"iconsWrapper\"> <span data-field=\"NewDeaths\" className=\"sortAscending\" onClick={sortAscending}>  </span> <span data-field=\"NewDeaths\" className=\"sortDescending\" onClick={sortDescending}>  </span> </div> </th>\n              <th> {Labels[\"TotalDeaths\"]} <div className=\"iconsWrapper\"> <span data-field=\"TotalDeaths\" className=\"sortAscending\" onClick={sortAscending}>  </span> <span data-field=\"TotalDeaths\" className=\"sortDescending\" onClick={sortDescending}>  </span> </div> </th>\n              <th> {Labels[\"NewRecovered\"]} <div className=\"iconsWrapper\"> <span data-field=\"NewRecovered\" className=\"sortAscending\" onClick={sortAscending}>  </span> <span data-field=\"NewRecovered\" className=\"sortDescending\" onClick={sortDescending}>  </span> </div> </th>\n              <th> {Labels[\"TotalRecovered\"]} <div className=\"iconsWrapper\"> <span data-field=\"TotalRecovered\" className=\"sortAscending\" onClick={sortAscending}>  </span> <span data-field=\"TotalRecovered\" className=\"sortDescending\" onClick={sortDescending}>  </span> </div> </th>\n            </tr>\n        </thead>\n    )\n}\nexport default TableHeader;","import React from 'react';\n\nfunction TableRow(props) {\n    //console.log(\"Props : \" + JSON.stringify(props));\n    return (\n        <tbody>\n            {\n                props.commonProps.map((country)=>{\n                    return (\n                        <tr key={country.ID}>\n                            <td>{country.Country}</td>\n                            <td>{country.NewConfirmed}</td>\n                            <td>{country.TotalConfirmed}</td>\n                            <td>{country.NewDeaths}</td>\n                            <td>{country.TotalDeaths}</td>\n                            <td>{country.NewRecovered}</td>\n                            <td>{country.TotalRecovered}</td>\n                        </tr>\n                    )\n                })\n            }\n        </tbody>\n\n    )\n}\n\nexport default TableRow;","import  { useSelector } from \"react-redux\";\nimport TableHeader from \"./TableHeader\";\nimport TableRow from \"./TableRow\";\nimport './Table.css';\n\nfunction Table() {\n    const TableArray = useSelector(state =>  {\n        //console.log(state.summary.items);\n        return state.table.items;\n    });\n\n    return (\n        <div className=\"TableWrapper\">\n            <table className=\"trackingTable\">\n                <TableHeader></TableHeader>\n                <TableRow commonProps={TableArray}></TableRow>\n            </table>\n\n        </div>\n    )\n}\n\nexport default Table;","import React, {useState,useEffect} from 'react';\nimport { TableActions } from '../../store/TableStore';\nimport { useDispatch, useSelector } from  'react-redux';\nimport './Filters.css';\n\nfunction Filters() {\n    const dispatch = useDispatch();\n\n    //let debounceTimerForNewConfirmed = null;\n    let minMaxValues = useSelector(state => state.table.minMaxValues);\n    useEffect(()=>{\n        setSelectedRangeValue(document.getElementById('newConfirmedFilter').value);\n    },[minMaxValues])\n\n    let [selectedRangeValue, setSelectedRangeValue] = useState(0);\n    const getFilterValues = ()=> {\n        let filterValues = {};\n        filterValues.country = document.getElementById(\"countryFilter\").value;\n        filterValues.NewConfirmed = document.getElementById('newConfirmedFilter').value;\n        return filterValues;\n    }\n    const filterChanged = () => {\n        console.log(\"Filters changed\");\n        let filterValues = getFilterValues();\n        dispatch(TableActions.applyFilter(filterValues));\n    }\n\n    const nameFilterHandler = (evt)=> {\n        filterChanged();\n    }\n    const debounceForNewConfirmed = (func, delay) => {\n        let debounceTimerForNewConfirmed\n        return function() {\n            const context = this;\n            const args = arguments;\n            clearTimeout(debounceTimerForNewConfirmed)\n            debounceTimerForNewConfirmed\n                = setTimeout(() => func.apply(context, args), delay)\n        }\n    }\n\n\n    const rangeChange = (evt)=>{\n        setSelectedRangeValue(document.getElementById('newConfirmedFilter').value);\n        filterChanged();\n    }\n    return (\n        <div className=\"filterDiv\">\n            <div className=\"eachFilterDiv\">\n                <input id=\"countryFilter\" className=\"filterInput\" placeholder=\"Search country name...\" type=\"text\" onKeyUp={nameFilterHandler} />\n            </div>\n            <div className=\"eachFilterDiv\">\n                <div><p className=\"rangeLabel\"> Minimum value: {minMaxValues.NewConfirmed.min}</p></div>\n                <div><p className=\"rangeLabel\"> Maximun value: {minMaxValues.NewConfirmed.max}</p></div>\n                <div><p className=\"rangeLabel\"> Selected value: {selectedRangeValue}</p></div>\n                <input id=\"newConfirmedFilter\" className=\"newConfirmedFilter\" onInput={debounceForNewConfirmed(rangeChange,500)} defaultValue={minMaxValues.NewConfirmed.max} step=\"5\" type=\"range\" min={minMaxValues.NewConfirmed.min} max={minMaxValues.NewConfirmed.max}  />\n            </div>\n        </div>\n    )\n}\n\nexport default Filters;","import { useEffect } from 'react';\nimport { useDispatch } from  'react-redux';\nimport Summary from \"../summary/Summary\";\nimport Table from \"../table/Table\";\nimport Filters from \"../filters/Filters\";\nimport './Wrapper.css';\nimport { SummaryActions } from '../../store/SummaryStore';\nimport { TableActions } from '../../store/TableStore';\nfunction Wrapper() {\n\n    const dispatch = useDispatch();\n    useEffect(()=>{\n\n        fetch(\"https://api.covid19api.com/summary\", {method : 'GET'}).then(data => data.json()).then((data)=>{\n            console.log(data);\n            dispatch(SummaryActions.updateSummary(data.Global));\n            dispatch(TableActions.updateTableStore(data.Countries));\n        }).catch((err)=>{\n\n            console.log(\"Error while fetching data\");\n        })\n    },[])\n    return (\n        <div className=\"wrapper\">\n            <Summary></Summary>\n            <Filters></Filters>\n            <Table></Table>\n        </div>\n    )\n}\n\nexport default Wrapper;","/*import logo from './logo.svg';*/\nimport './App.css';\nimport Header from './components/header/Header'\nimport Wrapper from \"./components/wrapper/Wrapper\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Header></Header>\n      <Wrapper/>\n    </div>\n  );\n}\n\nexport default App;\n","import  { configureStore } from '@reduxjs/toolkit';\n\nimport SummaryStore from \"./SummaryStore\";\nimport TableStore from \"./TableStore\";\n\nconst store = configureStore({\n    reducer :{\n        summary: SummaryStore.reducer,\n        table : TableStore.reducer\n    }\n})\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport store from \"./store/store\";\nimport {Provider} from 'react-redux';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}